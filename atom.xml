<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog Blog</title>
  
  <subtitle>하나씩 천천히</subtitle>
  <link href="https://mirrors89.github.io/atom.xml" rel="self"/>
  
  <link href="https://mirrors89.github.io/"/>
  <updated>2021-01-31T10:38:42.614Z</updated>
  <id>https://mirrors89.github.io/</id>
  
  <author>
    <name>Keeseung</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>[EFFECTIVE JAVA] Item 3 private 생성자나 열거 타입으로 싱글턴임을 보증하라</title>
    <link href="https://mirrors89.github.io/2021/01/effective-java-item-3/"/>
    <id>https://mirrors89.github.io/2021/01/effective-java-item-3/</id>
    <published>2021-01-30T15:00:00.000Z</published>
    <updated>2021-01-31T10:38:42.614Z</updated>
    
    <content type="html"><![CDATA[<h3 id="싱글턴이란"><a href="#싱글턴이란" class="headerlink" title="싱글턴이란?"></a>싱글턴이란?</h3><ul><li>인스턴스를 오직 하나만 생성할 수 있는 클래스</li><li>함수와 같은 무상태(stateless) 객체나 설계상 유일해야 하는 시스템 컴포넌트 등</li></ul><h3 id="클래스를-싱글턴으로-만들면-테스트하기-어려워질-수-있다"><a href="#클래스를-싱글턴으로-만들면-테스트하기-어려워질-수-있다" class="headerlink" title="클래스를 싱글턴으로 만들면 테스트하기 어려워질 수 있다."></a>클래스를 싱글턴으로 만들면 테스트하기 어려워질 수 있다.</h3><ul><li>싱글턴을 mock 구현으로 대체할 수 없기 때문</li></ul><h3 id="싱글턴을-만드는-방식"><a href="#싱글턴을-만드는-방식" class="headerlink" title="싱글턴을 만드는 방식"></a>싱글턴을 만드는 방식</h3><h4 id="public-static-멤버가-final-필드인-방식"><a href="#public-static-멤버가-final-필드인-방식" class="headerlink" title="public static 멤버가 final 필드인 방식"></a>public static 멤버가 final 필드인 방식</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonClass</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> SingletonClass INSTANCE = <span class="keyword">new</span> SingletonClass();</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonClass</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>private 생성자는 <code>SingletonClass.INSTANCE</code> 초기화 할 때 딱 한 번만 호출된다. </li><li>public이나 protected 생성자가 없으므로 초기화될 때 만들어진 인스턴스가 전체 시스템에서 하나임이 보장된다</li><li>다만, 리플렉션 API인 <code>AccessibleObject.setAccessible</code>을 사용해 생성자를 호출할 수 있다.<ul><li>생성자를 수정해서 두번째 객체가 생성하려 때 예외를 던지도록 해 방어할 수 있다.</li></ul></li></ul><h5 id="장점"><a href="#장점" class="headerlink" title="장점"></a>장점</h5><ul><li>해당 클래스가 싱글턴임이 API에 드러난다.</li><li>간결함</li></ul><h4 id="정적-팩터리-메서드를-public-static-멤버로-제공하는-방식"><a href="#정적-팩터리-메서드를-public-static-멤버로-제공하는-방식" class="headerlink" title="정적 팩터리 메서드를 public static 멤버로 제공하는 방식"></a>정적 팩터리 메서드를 public static 멤버로 제공하는 방식</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonClass</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> SingletonClass INSTANCE = <span class="keyword">new</span> SingletonClass();</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonClass</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonClass <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="장점-1"><a href="#장점-1" class="headerlink" title="장점"></a>장점</h5><ul><li>API를 바꾸지 않고도 싱글턴이 아니게 변경할 수 있다.</li><li>정적 팩터리를 제네릭 싱글턴 팩터리로 만들 수 있다.</li><li>정적 팩터리의 메서드를 공급자(supplier)로 사용할 수 있다.<ul><li>예) <code>Supplier&lt;SingletonClass&gt;</code></li></ul></li></ul><blockquote><p>위 두가지 방식으로 만든 싱글턴 클래스를 직렬화하려면 readResolve 메서드를 제공해야한다.<br>이렇게 하지 않으면 역직렬할 때 마다 새로운 인스턴스가 만들어진다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Object <span class="title">readResolve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> INSTANCE;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h4 id="열거-타입으로-선언하는-방식"><a href="#열거-타입으로-선언하는-방식" class="headerlink" title="열거 타입으로 선언하는 방식"></a>열거 타입으로 선언하는 방식</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">SingletonEnum</span> </span>&#123;</span><br><span class="line">    INSTANCE</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>public 필드 방식과 비슷하지만, 더 간결하고, 추가 노력없이 직렬화할 수 있다.</li><li>복잡한 직렬화 상황이나 리플렉션 공격에서도 제2의 인스턴스가 생기는 일을 완벽히 막아준다.</li><li>대부분 상황에서는 원소가 하나뿐인 열거 타입이 싱글턴을 만드는 가장 좋은 방법이다.</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;싱글턴이란&quot;&gt;&lt;a href=&quot;#싱글턴이란&quot; class=&quot;headerlink&quot; title=&quot;싱글턴이란?&quot;&gt;&lt;/a&gt;싱글턴이란?&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;인스턴스를 오직 하나만 생성할 수 있는 클래스&lt;/li&gt;
&lt;li&gt;함수와 같은 무상태(stat</summary>
      
    
    
    
    <category term="개발" scheme="https://mirrors89.github.io/categories/%EA%B0%9C%EB%B0%9C/"/>
    
    <category term="Java" scheme="https://mirrors89.github.io/categories/%EA%B0%9C%EB%B0%9C/Java/"/>
    
    
    <category term="Effactive Java" scheme="https://mirrors89.github.io/tags/Effactive-Java/"/>
    
  </entry>
  
  <entry>
    <title>[EFFECTIVE JAVA] Item 2 생성자에 매개변수가 많다면 빌더를 고려하라</title>
    <link href="https://mirrors89.github.io/2021/01/effective-java-item-2/"/>
    <id>https://mirrors89.github.io/2021/01/effective-java-item-2/</id>
    <published>2021-01-27T15:00:00.000Z</published>
    <updated>2021-01-30T06:19:15.328Z</updated>
    
    <content type="html"><![CDATA[<h3 id="매개변수가-많을-때-생성자로-점층적-생성자-패턴을-사용할-경우"><a href="#매개변수가-많을-때-생성자로-점층적-생성자-패턴을-사용할-경우" class="headerlink" title="매개변수가 많을 때 생성자로 점층적 생성자 패턴을 사용할 경우"></a>매개변수가 많을 때 생성자로 점층적 생성자 패턴을 사용할 경우</h3><ul><li>매개변수 개수가 많아지면 클라이언트 코드를 작성하거나 읽기 어렵다.</li><li>매개변수 각 값의 이미가 무엇인지 해깔린다.</li><li>매개변수가 몇개인지 주의해서 사용해야 한다.</li><li>클라이언트 실수로 순서를 바꿔 건내줘도 컴파일에 오류를 잡지 못하고 런타임에 잘못 동작하게 된다.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NutritionFacts</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> servingSize;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> servings;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> calories;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> fat;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> sodium;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> carbohydrate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NutritionFacts</span><span class="params">(<span class="keyword">int</span> servingSize, <span class="keyword">int</span> servings)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(servingSize, servings, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NutritionFacts</span><span class="params">(<span class="keyword">int</span> servingSize, <span class="keyword">int</span> servings, <span class="keyword">int</span> calories)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(servingSize, servings, calories, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NutritionFacts</span><span class="params">(<span class="keyword">int</span> servingSize, <span class="keyword">int</span> servings, <span class="keyword">int</span> calories, <span class="keyword">int</span> fat)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(servingSize, servings, calories, fat, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NutritionFacts</span><span class="params">(<span class="keyword">int</span> servingSize, <span class="keyword">int</span> servings, <span class="keyword">int</span> calories, <span class="keyword">int</span> fat, <span class="keyword">int</span> sodium)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(servingSize, servings, calories, fat, sodium, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NutritionFacts</span><span class="params">(<span class="keyword">int</span> servingSize, <span class="keyword">int</span> servings, <span class="keyword">int</span> calories, <span class="keyword">int</span> fat, <span class="keyword">int</span> sodium, <span class="keyword">int</span> carbohydrate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.servingSize = servingSize;</span><br><span class="line">        <span class="keyword">this</span>.servings = servings;</span><br><span class="line">        <span class="keyword">this</span>.calories = calories;</span><br><span class="line">        <span class="keyword">this</span>.fat = fat;</span><br><span class="line">        <span class="keyword">this</span>.sodium = sodium;</span><br><span class="line">        <span class="keyword">this</span>.carbohydrate = carbohydrate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="매개변수가-많을-때-자바빈즈-패턴을-사용할-경우"><a href="#매개변수가-많을-때-자바빈즈-패턴을-사용할-경우" class="headerlink" title="매개변수가 많을 때 자바빈즈 패턴을 사용할 경우"></a>매개변수가 많을 때 자바빈즈 패턴을 사용할 경우</h3><ul><li>객체를 생성하고 setter를 사용하여 값을 설정하는 방법이다.</li><li>객체 하나를 만드려면 메서드를 여러 개 호출 해야한다.</li><li>객체가 완전히 생성되기 전까지는 일관성이 무너진 상태에 놓이게 된다.</li><li>자바빈즈 패턴에서는 클래스를 불변으로 만들수 없으며 스레드 안정성을 보장할 수 없다.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NutritionFacts</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> servingSize = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> servings    = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> calories    = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> fat         = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> sodium      = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> carbohydrate = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NutritionFacts</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setServingSize</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        servingSize = val</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setServings</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        servings = val</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCalories</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        calories = val</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFat</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        fat = val</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSodium</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        sodium = val</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCarbohydrate</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        carbohydrate = val</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="매개변수가-많을-때-빌더-패턴을-사용할-경우"><a href="#매개변수가-많을-때-빌더-패턴을-사용할-경우" class="headerlink" title="매개변수가 많을 때 빌더 패턴을 사용할 경우"></a>매개변수가 많을 때 빌더 패턴을 사용할 경우</h3><ul><li>필수 매개변수만으로 생성자를 호출해 빌더 객체를 얻는다.</li><li>빌더 객체가 제공하는 일종의 세터 메서드들로 원하는 선택 매개변수들을 설정한다.</li><li>build 메서드를 호출해 필요한 불변 객체를 얻는다.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NutritionFacts</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> servingSize;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> servings;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> calories;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> fat;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> sodium;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> carbohydrate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 필수 매개변수    </span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> servingSize;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> servings;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> calories = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> fat = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> carbohydrate = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> sodium = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Builder</span><span class="params">(<span class="keyword">int</span> servingSize, <span class="keyword">int</span> servings)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.servingSize = servingSize;</span><br><span class="line"><span class="keyword">this</span>.servings = servings;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Builder <span class="title">calories</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">calories = val;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Builder <span class="title">fat</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">fat = val;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Builder <span class="title">carbohydrate</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">carbohydrate = val;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Builder <span class="title">sodium</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">sodium = val;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> NutritionFacts <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> NutritionFacts(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">NutritionFacts</span><span class="params">(Builder builder)</span> </span>&#123;</span><br><span class="line">servingSize = builder.servingSize;</span><br><span class="line">servings = builder.servings;</span><br><span class="line">calories = builder.calories;</span><br><span class="line">fat = builder.fat;</span><br><span class="line">sodium = builder.sodium;</span><br><span class="line">carbohydrate = builder.carbohydrate;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="장점"><a href="#장점" class="headerlink" title="장점"></a>장점</h5><ul><li>불변 객체를 만들 수 있다.</li><li>빌더 패턴은 계층적으로 설계된 클래스와 함께 쓰기에 좋다.</li><li>빌더 패턴은 빌더 하나로 여러 객체를 순회하면서 만들 수도 있다.</li><li>빌더에 넘기는 매개변수에 따라 다른객체를 만들 수도 있다.</li><li>일련 번호와 같은 특정 필드는 빌더가 알아서 채우도록 할 수 있다.</li></ul><h5 id="단점"><a href="#단점" class="headerlink" title="단점"></a>단점</h5><ul><li>객체를 만드려면 빌더부터 만들어야 한다. 성능에 민감한 상황에 문제가 될 수 있다.</li><li> 점층적 생성자 패턴보다 코드가 장황해서 매개변수가 4개 이상일 때 사용해야 효율적이다.</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;매개변수가-많을-때-생성자로-점층적-생성자-패턴을-사용할-경우&quot;&gt;&lt;a href=&quot;#매개변수가-많을-때-생성자로-점층적-생성자-패턴을-사용할-경우&quot; class=&quot;headerlink&quot; title=&quot;매개변수가 많을 때 생성자로 점층적 생성자 </summary>
      
    
    
    
    <category term="개발" scheme="https://mirrors89.github.io/categories/%EA%B0%9C%EB%B0%9C/"/>
    
    <category term="Java" scheme="https://mirrors89.github.io/categories/%EA%B0%9C%EB%B0%9C/Java/"/>
    
    
    <category term="Effactive Java" scheme="https://mirrors89.github.io/tags/Effactive-Java/"/>
    
  </entry>
  
  <entry>
    <title>[EFFECTIVE JAVA] Item 1 생성자 대신 정적 팩터리 메서드를 고려하라</title>
    <link href="https://mirrors89.github.io/2021/01/effective-java-item-1/"/>
    <id>https://mirrors89.github.io/2021/01/effective-java-item-1/</id>
    <published>2021-01-26T15:00:00.000Z</published>
    <updated>2021-01-30T06:19:15.328Z</updated>
    
    <content type="html"><![CDATA[<h3 id="클래스는-public-생성자와-별도로-클래스의-인스턴스를-반환하는-정적-팩터리-메서드-static-factory-method-를-제공할-수-있다"><a href="#클래스는-public-생성자와-별도로-클래스의-인스턴스를-반환하는-정적-팩터리-메서드-static-factory-method-를-제공할-수-있다" class="headerlink" title="클래스는 public 생성자와 별도로 클래스의 인스턴스를 반환하는 정적 팩터리 메서드(static factory method)를 제공할 수 있다."></a>클래스는 public 생성자와 별도로 클래스의 인스턴스를 반환하는 정적 팩터리 메서드(static factory method)를 제공할 수 있다.</h3><h3 id="정적-팩터리-메서드의-장점"><a href="#정적-팩터리-메서드의-장점" class="headerlink" title="정적 팩터리 메서드의 장점"></a>정적 팩터리 메서드의 장점</h3><ol><li><p>이름을 가질 수 있다.</p><ul><li>기본 생성자에 넘기는 매개 변수와 생성자 자체만으로는 특성을 제대로 설명하지 못한다.</li><li>정적 팩터리는 이름만 잘 지으면 특성을 쉽게 묘사할 수 있다.</li></ul></li><li><p>호출될 때마다 인스턴스를 새로 생성하지는 않아도 된다.</p><ul><li>인스턴스를 미리 만들어 놓거나 새로 생성한 인스턴스를 캐싱하여 재활용하는 방법으로 불필요한 객체 생성을 피할 수 있다.</li><li><a href="https://ko.wikipedia.org/wiki/%ED%94%8C%EB%9D%BC%EC%9D%B4%EC%9B%A8%EC%9D%B4%ED%8A%B8_%ED%8C%A8%ED%84%B4">플라이웨이트</a> 패턴과 비슷한 기법이다.</li><li>인스턴스 통제(instance-controlled) 클래스<ul><li>싱글턴</li><li>인스턴스화 불가</li><li>불변 값 클래스</li><li>열거 타입</li></ul></li></ul></li><li><h2 id="반환-타입의-하위-타입-객체를-반환할-수-있는-능력이-있다"><a href="#반환-타입의-하위-타입-객체를-반환할-수-있는-능력이-있다" class="headerlink" title="반환 타입의 하위 타입 객체를 반환할 수 있는 능력이 있다."></a>반환 타입의 하위 타입 객체를 반환할 수 있는 능력이 있다.</h2></li><li><p>입력 매개변수에 따라 매번 다른 클래스의 객체를 반환할 수 있다.</p><ul><li>하위타입이기만 하면 어떤 클래스의 객체를 반환하든 상관없다.</li><li>클라이언트는 팩터리가 건네주는 객체가 어느 클래스의 인스턴스인지 알 수도 없고 알 필요도 없다. </li></ul></li><li><p>정적 팩터리 메서드를 작성하는 시점에는 반환할 객체 클래스가 존재하지 않아도 된다.</p><ul><li>서비스 제공자 프레임워크에서의 제공자는 서비스의 구현체다.</li><li>서비스 제공자 프레임워크 핵심 컴포넌트 3개<ul><li>구현체의 동작을 정의하는 <code>서비스 인터페이스</code></li><li>제공자가 구현체를 등록할 때 사용하는 <code>제공자 등록 API</code></li><li>클라이언트가 서비스의 인스턴스를 얻을 때 사용하는 <code>서비스 접근 API</code><ul><li>‘유연한 정적 팩터리’의 실체</li></ul></li></ul></li></ul></li></ol><h3 id="정적-팩터리-메서드의-단점"><a href="#정적-팩터리-메서드의-단점" class="headerlink" title="정적 팩터리 메서드의 단점"></a>정적 팩터리 메서드의 단점</h3><ol><li><p>상속을 하려면 public이나 protected 생성자가 필요하니 정적 패터리 메서드만 제공하려면 하위 클래스를 만들 수 없다.</p><ul><li>이 제약은 상속보다 컴포지션을 사용하도록 유도하고 불변 타입으로 만들려면 이 제약을 지켜야한다는 점에서 장점일 수도 있다.</li></ul></li><li><p>정적 패터리 메서드는 프로그래머가 찾기 어렵다.</p><ul><li>사용자가 팩터리 메서드 방식 클래스를 인턴스화 할 방법을 알아야한다.</li></ul></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;클래스는-public-생성자와-별도로-클래스의-인스턴스를-반환하는-정적-팩터리-메서드-static-factory-method-를-제공할-수-있다&quot;&gt;&lt;a href=&quot;#클래스는-public-생성자와-별도로-클래스의-인스턴스를-반환하는-정적-</summary>
      
    
    
    
    <category term="개발" scheme="https://mirrors89.github.io/categories/%EA%B0%9C%EB%B0%9C/"/>
    
    <category term="Java" scheme="https://mirrors89.github.io/categories/%EA%B0%9C%EB%B0%9C/Java/"/>
    
    
    <category term="Effactive Java" scheme="https://mirrors89.github.io/tags/Effactive-Java/"/>
    
  </entry>
  
  <entry>
    <title>Hexo를 이용하여 블로그 제작하기 (1)</title>
    <link href="https://mirrors89.github.io/2017/04/hexo-getting-started-1st/"/>
    <id>https://mirrors89.github.io/2017/04/hexo-getting-started-1st/</id>
    <published>2017-04-18T05:45:42.000Z</published>
    <updated>2021-01-30T06:19:15.329Z</updated>
    
    <content type="html"><![CDATA[<p>티스토리 블로그 초대장이 있었지만 깃헙으로 블로그를 만들면 무료로 호스팅을 쓸 수 있으므로 Hexo를 이용해 블로그를 제작해보습니다.</p><p>자바스크립트를 모르더라도 쉽게 만들 수 있다는 장점이 있습니다.</p><p>제작에 중점을 두었기 때문에 내용이 부족할수 있습니다.<br>궁굼한점은 덧글이나 <a href="https://hexo.io/ko/">hexo</a> 홈페이지를 참조하시기 바랍니다.</p><h1 id="시작전-준비-사항"><a href="#시작전-준비-사항" class="headerlink" title="시작전 준비 사항"></a>시작전 준비 사항</h1><ul><li><a href="https://nodejs.org/ko/">Node.js</a></li><li><a href="https://git-scm.com/">Git</a> (해당 포스팅에서는 Git 사용법은 다루지 않습니다.)</li><li><a href="https://github.com/">Github</a> 계정</li></ul><p>위에 3가지가 모두 준비되었으면 npm을 이용하여 Hexo를 설치합니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><h1 id="블로그-프로젝트-생성"><a href="#블로그-프로젝트-생성" class="headerlink" title="블로그 프로젝트 생성"></a>블로그 프로젝트 생성</h1><p>먼저 Github repository를 만듭니다.<br>repository 이름은 (Github username).github.io로 만듭시다.<br>repository 이름이 블로그 주소가 됩니다.</p><blockquote><p>자세한건 <a href="https://pages.github.com/">Github Page</a> 확인</p></blockquote><p>repository가 만들어지면 터미널에서 해당 repository를 clone 받습니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/mirrors89/mirrors89.github.io.git</span><br></pre></td></tr></table></figure><p>clone 받은 타겟 폴더에서 Hexo를 초기화하기 위해 아래의 명령을 수행합니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init mirrors89.github.io.git</span><br><span class="line"><span class="built_in">cd</span> mirrors89.github.io.git</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><h1 id="서버-실행"><a href="#서버-실행" class="headerlink" title="서버 실행"></a>서버 실행</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>로컬 서버 실행 후 <a href="https://localhost:4000/">https://localhost:4000</a> 접속해봅니다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;티스토리 블로그 초대장이 있었지만 깃헙으로 블로그를 만들면 무료로 호스팅을 쓸 수 있으므로 Hexo를 이용해 블로그를 제작해보습니다.&lt;/p&gt;
&lt;p&gt;자바스크립트를 모르더라도 쉽게 만들 수 있다는 장점이 있습니다.&lt;/p&gt;
&lt;p&gt;제작에 중점을 두었기 </summary>
      
    
    
    
    <category term="개발" scheme="https://mirrors89.github.io/categories/%EA%B0%9C%EB%B0%9C/"/>
    
    <category term="Hexo" scheme="https://mirrors89.github.io/categories/%EA%B0%9C%EB%B0%9C/Hexo/"/>
    
    
    <category term="Hexo" scheme="https://mirrors89.github.io/tags/Hexo/"/>
    
    <category term="Blog" scheme="https://mirrors89.github.io/tags/Blog/"/>
    
    <category term="Getting Started" scheme="https://mirrors89.github.io/tags/Getting-Started/"/>
    
  </entry>
  
  <entry>
    <title>이제서야 시작하는 블로깅</title>
    <link href="https://mirrors89.github.io/2017/04/first-post-with-blog/"/>
    <id>https://mirrors89.github.io/2017/04/first-post-with-blog/</id>
    <published>2017-04-17T04:58:13.000Z</published>
    <updated>2021-01-30T06:19:15.328Z</updated>
    
    <content type="html"><![CDATA[<p>이제부터 개발 관련 글을 계속 올릴 예정입니다.<br>테마를 다시 바꿔야지.<br>너무 지저분해지고 있다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;이제부터 개발 관련 글을 계속 올릴 예정입니다.&lt;br&gt;테마를 다시 바꿔야지.&lt;br&gt;너무 지저분해지고 있다.&lt;/p&gt;
</summary>
      
    
    
    
    <category term="일상" scheme="https://mirrors89.github.io/categories/%EC%9D%BC%EC%83%81/"/>
    
    <category term="잡담" scheme="https://mirrors89.github.io/categories/%EC%9D%BC%EC%83%81/%EC%9E%A1%EB%8B%B4/"/>
    
    
    <category term="잡담" scheme="https://mirrors89.github.io/tags/%EC%9E%A1%EB%8B%B4/"/>
    
  </entry>
  
</feed>
